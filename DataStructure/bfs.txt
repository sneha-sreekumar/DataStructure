#include<stdio.h>
#include<stdlib.h>
#define MAX_VERTICES 100
void bfs(int adjMatrix[MAX_VERTICES][MAX_VERTICES], int vertices, int start);
int main() {
    int adjMatrix[MAX_VERTICES][MAX_VERTICES];
    int vertices, edges, i, j;
    printf("Enter the number of vertices: ");
    scanf("%d", &vertices);
    printf("Enter the number of edges: ");
    scanf("%d", &edges);
    for (i = 0; i < vertices; i++) {
        for (j = 0; j < vertices; j++) {
            adjMatrix[i][j] = 0;
        }
    }
    printf("Enter the edges (format: vertex1 vertex2):\n");
    for (i = 0; i < edges; i++) {
        int vertex1, vertex2;
        scanf("%d %d", &vertex1, &vertex2);
        adjMatrix[vertex1][vertex2] = 1;
        adjMatrix[vertex2][vertex1] = 1; 
    }
    int startVertex;
    printf("Enter the starting vertex for BFS: ");
    scanf("%d", &startVertex);
    printf("Breadth-First Search starting from vertex %d:\n", startVertex);
    bfs(adjMatrix, vertices, startVertex);
    return 0;
}
void bfs(int adjMatrix[MAX_VERTICES][MAX_VERTICES], int vertices, int start) {
    int queue[MAX_VERTICES];
    int front = -1, rear = -1;
    int visited[MAX_VERTICES] = {0};
    queue[++rear] = start;
    visited[start] = 1;
    while (front != rear) {
        int currentVertex = queue[++front];
â€ƒ
        printf("%d ", currentVertex);
        for (int i = 0; i < vertices; i++) {
            if (adjMatrix[currentVertex][i] == 1 && !visited[i]) {
                queue[++rear] = i;
                visited[i] = 1;
            }
        }
    }
}

